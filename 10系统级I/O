输入输出I/O是在主存和外设（磁盘驱动器、终端、网络）之间复制数据的过程。

输入操作 从I/O设备复制数据到主存
输出操作 从主存复制数据到I/O设备

UnixI/O：
所有I/O设备都被模型化为文件，所有输入输出都被当作对相应文件的读和写来执行。

打开文件：应用程序通过要求内核打开相应的文件，来宣告它想要访问一个I/O设备。内核返回一个小的非负整数，叫做描述符。
Linux shell创建每个进程开始时都有三个打开的文件：标准输入、标准输出、标准错误

改变当前的文件位置：对于每个打开的文件，内核保持着一个文件位置k，初始为0.这个文件位置是从文件开头起始的字节偏移量。
应用程序通过执行seek操作，显式的设置文件的当前位置为k

读写文件：读操作就是从文件复制n>0个字节到内存，从当前文件位置k开始，然后将k增加到k+n。

关闭文件：当应用完成对文件的访问之后，通知内核关闭文件。作为响应，内核释放文件打开时创建的数据结构，并将这个描述符恢复到可以使用的描述符池中。

普通文件：包含任意数据。
文本文件：只含有ASCII和Unicode字符的普通文件
二进制文件：除了文本文件的其他文件

目录：包含一组link（链接）的文件，每个链接都将一个文件名映射到文件，这个文件可能是另一个目录。
每个目录至少含有两个条目：“.”是到该目录自身的链接，“..”是到目录层次结构中父目录的链接

mkdir创建一个目录，ls查看其内容，rmdir删除该目录

套接字：用来与另一个进程进行跨网络通信的文件

命名通道、符号链接、字符和块设备

Linux内核将所有文件组织成一个目录层次结构，由名为/的根目录确定。

每个进程都有一个当前工作目录来确定其在目录层次结构中的当前位置。
目录层次结构中的位置用路径名指定。
绝对路径名：斜杠开始，从根节点开始的路径
相对路径名：从当前工作目录开始的路径

打开和关闭文件
进程通过调用open函数打开一个已存在的文件或者创建一个新的文件：
进程通过调用close函数关闭一个打开的文件。

读和写文件
应用程序通过调用read和write函数执行输入和输出

read函数从描述符为fd的当前文件位置复制最多n个字节到内存位置buf。 EOF（end of file）
write函数从内存位置buf复制最多n个字节到描述符fd的当前文件位置

ssize_t long
size_t unsigned long

RIO包：健壮的I/O包
无缓冲的输入输出函数：这些函数直接在内存和文件之间传送数据，没有应用级缓冲。它们对将二进制数据读写到网络和从网络读写二进制数据尤其有用
带缓冲的输入函数：这些函数允许你高效的从文件中读取文本行和二进制数据，这些文件的内容缓存在应用级缓冲区内，类似与为printf这样的标准I/O函数提供的缓冲区。

无缓冲的输入输出函数：调用rio_readn rio_writen函数在内存和文件之间直接传送数据
带缓冲的输入函数：调用rio_readnb rio_readlineb

读取文件元数据：
调用stat和fstat函数，检索关于文件的信息（有时也称为文件的元数据）

读取目录内容：


共享文件：
描述符表：每个进程一张表
打开文件表：所有进程共享
v-node表：每个表项包含stat结构中的大多数信息，所有进程共享

I/O重定向：
允许用户将磁盘文件和标准输入输出联系起来。
dup2函数复制描述符表表项oldfd到描述符表表项newfd，覆盖描述符表表项newfd以前的内容
若newfd已经打开，dup2会在复制oldfd之前关闭newfd


