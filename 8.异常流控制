从处理器加电开始直到你断电位置，程序计数器假设一个值的序列：
a0,a1,...,an
其中每一个ak都是某个指令Ik相应的地址。每次从ak到ak-1的过度称为控制转移
这些控制转移序列叫做处理器的控制流。
最简单的控制流就是每个Ik和Ik+1在内存中都是相邻的，这种序列的突变（Ik与Ik+1不相邻）通常由跳转、调用和返回这些程序指令造成。
我们把这些突变叫做异常控制流ECF

应用程序通过陷阱trap或者系统调用system call的ECF形向操作系统请求服务。

异常：控制流中的突变，用于响应处理器状态中的变化

异常处理：
系统为每种类型的异常都分配了一个唯一的非负整数异常号。其中一些号码是由处理器的设计者分配的，其他号码由操作系统内核设计者分配
前者：被0除，缺页，内存访问违例，断点以及算数运算溢出。
后者：系统调用和来自外部I/O设备的信号。
系统启动，操作系统分配和初始化一张称为异常表的跳转表，使得表目k包含异常k的处理程序地址
异常表的起始地址放在一个叫做异常表基址寄存器的特殊CPU寄存器内。

异常分为：中断、陷阱、故障和终止

中断：异步发生的，来自处理器外部的I/O设备的信号的结果。
其余三类指令是同步发生的，执行当前指令的结果，统称为故障指令。

陷阱和系统调用：陷阱是有意的异常，是执行一条指令的结果。陷阱最重要的用途是在用户程序和内核之间提供一个像过程一样的接口，叫做系统调用。
读一个文件read、创建一个新进程fork、加载一个新程序execve、终止当前进程exit

故障:由错误情况引起，它可能能够被故障处理程序修正。 缺页异常

终止：不可恢复的致命错误造成的结果，通常是一些硬件错误。


进程：一个独立的逻辑控制流，提供一个假象，好像我们的程序独占地使用处理器。
一个私有的地址空间提供一个假象，好像我们的程序独占地使用内存系统。

逻辑控制流：
并发流：
私有空间地址：

用户模式和内核模式
